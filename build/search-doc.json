[{"title":"Assembler","type":0,"sectionRef":"#","url":"/Puzzle/api/Assembler","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Assembler","url":"/Puzzle/api/Assembler#types","content":" "},{"title":"Assembler<T>​","type":1,"pageTitle":"Assembler","url":"/Puzzle/api/Assembler#Assembler<T>","content":"&lt;/&gt; type Assembler&lt;T&gt; = (data: T) → Component&lt;T&gt;  "},{"title":"Functions​","type":1,"pageTitle":"Assembler","url":"/Puzzle/api/Assembler#functions","content":" "},{"title":"__tostring​","type":1,"pageTitle":"Assembler","url":"/Puzzle/api/Assembler#__tostring","content":"&lt;/&gt; Assembler.__tostring(self: Assembler) → string   "},{"title":"Constructor​","type":1,"pageTitle":"Assembler","url":"/Puzzle/api/Assembler#Constructor","content":"Constructor &lt;/&gt; Assembler.Constructor(name: string) → Assembler  Puzzle constructors are special Constructors are returned by the module and called like local functions instead of acting like class functions. local Assembler = require(Puzzle.Assembler) local assembler = Assembler &quot;Name&quot; Constructs a new Assembler.  "},{"title":"Assembler()​","type":1,"pageTitle":"Assembler","url":"/Puzzle/api/Assembler#__call","content":"&lt;/&gt; Assembler(data: T) → Component&lt;T&gt;  "},{"title":"QueryResult","type":0,"sectionRef":"#","url":"/Puzzle/api/QueryResult","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"QueryResult","url":"/Puzzle/api/QueryResult#functions","content":" "},{"title":"Without​","type":1,"pageTitle":"QueryResult","url":"/Puzzle/api/QueryResult#Without","content":"&lt;/&gt; QueryResult:Without(...: Assembler&lt;any&gt;) → QueryResult Returns a QueryResult without including the given assemblers. "},{"title":"Signal","type":0,"sectionRef":"#","url":"/Puzzle/api/Signal","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#types","content":" "},{"title":"SignalConnection​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#SignalConnection","content":"&lt;/&gt; interface SignalConnection { Connected: boolean Disconnect: (SignalConnection) → () } Represents a connection to a signal. local connection = signal:Connect(function() end) print(connection.Connected) --&gt; true connection:Disconnect() print(connection.Connected) --&gt; false   "},{"title":"Connectioncallback​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Connectioncallback","content":"&lt;/&gt; type Connectioncallback = (...any) → () A function connected to a signal. "},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#functions","content":" "},{"title":"Constructor​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Constructor","content":"&lt;/&gt; Signal.Constructor(destroyOnLastConnection: true?) → Signal Constructs a new Signal  "},{"title":"Wrap​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Wrap","content":"&lt;/&gt; Signal.Wrap( rbxScriptSignal: RBXScriptSignal -- Existing RBXScriptSignal to wrap ) → Signal Constructs a new Signal that wraps around an RBXScriptSignal. For example: local signal = Signal.Wrap(workspace.ChildAdded) signal:Connect(function(part) print(part.Name .. &quot; added&quot;) end) Instance.new(&quot;Part&quot;).Parent = workspace   "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Connect","content":"&lt;/&gt; Signal:Connect(callback: Connectioncallback) → SignalConnection Connects a function to the signal, which will be called anytime the signal is fired. signal:Connect(function(msg, num) print(msg, num) end) signal:Fire(&quot;Hello&quot;, 25)   "},{"title":"Once​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Once","content":"&lt;/&gt; Signal:Once(callback: Connectioncallback) → SignalConnection Connects a function to the signal, which will be called the next time the signal fires. Once the connection is triggered, it will disconnect itself. signal:Once(function(msg, num) print(msg, num) end) signal:Fire(&quot;Hello&quot;, 25) signal:Fire(&quot;This message will not go through&quot;, 10)   "},{"title":"GetConnections​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#GetConnections","content":"&lt;/&gt; Signal:GetConnections() → {Connection} Gets all connections from the signal.  "},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Disconnects all connections from the signal. signal:DisconnectAll()   "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(...: any) → () Fire the signal, which will call all of the connected functions with the given arguments. signal:Fire(&quot;Hello&quot;) -- Any number of arguments can be fired: signal:Fire(&quot;Hello&quot;, 32, {Test = &quot;Test&quot;}, true)   "},{"title":"FireDeferred​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#FireDeferred","content":"&lt;/&gt; Signal:FireDeferred(...: any) → () Same as Fire, but uses task.defer internally &amp; doesn't take advantage of thread reuse. signal:FireDeferred(&quot;Hello&quot;)   "},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:Wait() → ...any Yields the current thread until the signal is fired, and returns the arguments fired from the signal. Yielding the current thread is not always desirable. If the desire is to only capture the next event fired, using Once might be a better solution. task.spawn(function() local msg, num = signal:Wait() print(msg, num) --&gt; &quot;Hello&quot;, 32 end) signal:Fire(&quot;Hello&quot;, 32)   "},{"title":"Destroy​","type":1,"pageTitle":"Signal","url":"/Puzzle/api/Signal#Destroy","content":"&lt;/&gt; Signal:Destroy() → () Cleans up the signal. Technically, this is only necessary if the signal is created usingSignal.Wrap. Connections should be properly GC'd once the signal is no longer referenced anywhere. However, it is still good practice to include ways to strictly clean up resources. Calling Destroy on a signal will also disconnect all connections immediately. signal:Destroy()  "},{"title":"Types","type":0,"sectionRef":"#","url":"/Puzzle/api/Types","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#types","content":" "},{"title":"Component​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#Component","content":"&lt;/&gt; interface Component { data: T name: string }  "},{"title":"Properties​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#properties","content":" "},{"title":"Signal​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#Signal","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Types.Signal: Signal   "},{"title":"Assembler​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#Assembler","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Types.Assembler: Assembler   "},{"title":"World​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#World","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Types.World: World   "},{"title":"None​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#None","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Types.None: None None is a unique symbol that replaces nil values in components. Some components may be used just as tags, with data == nil, but missing components are also internally shown as nil. None is used as a marker value in these cases. Since it is a unique table, None represents nil always and anywhere. If working with World:Get, expected nil component values will appear as None. caution local function ValueShouldBeNil(componentValue: Puzzle.None) if componentValue then -- Normally, this conditional would have failed but None is a positive value print(&quot;The component value is not nil but None!&quot;) end end  "},{"title":"Functions​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#functions","content":" "},{"title":"Component​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#Component","content":"Assert &lt;/&gt; Types.Component( value: any, dataIsTable: boolean? ) → boolean Checks if the given value is a component. Additionally, check if the component data is a table by passing the second argument.  "},{"title":"Assembler​","type":1,"pageTitle":"Types","url":"/Puzzle/api/Types#Assembler","content":"Assert &lt;/&gt; Types.Assembler(assembler: any) → boolean Checks if the given value is an assembler. "},{"title":"World","type":0,"sectionRef":"#","url":"/Puzzle/api/World","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#functions","content":" "},{"title":"Constructor​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Constructor","content":"Constructor &lt;/&gt; World.Constructor(destroyProcedures: DestroyProcedures?) → World "},{"title":"Types","type":1,"pageTitle":"World","url":"/Puzzle/api/World##","content":""},{"title":"​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#DestroyProcedures","content":"type DestroyProcedures = {[string]: ( object: any, world: World? ) → ()}   Puzzle constructors are special Constructors are returned by the module and called like local functions instead of acting like class functions. local World = require(Puzzle.World) local world = World() Constructs a new World.  "},{"title":"Query​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Query","content":"&lt;/&gt; World:Query(...: Assembler&lt;any&gt;) → QueryResult Returns a QueryResult based on the given assemblers.  "},{"title":"Has​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Has","content":"&lt;/&gt; World:Has(id: number) → boolean Checks if the world contains the requested entity or not.  "},{"title":"OnChange​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#OnChange","content":"&lt;/&gt; World:OnChange(idOrAssembler: number | Assembler&lt;any&gt;) → Signal Returns a Signal that fires its listeners on component or entity changes.  "},{"title":"SpawnAt​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#SpawnAt","content":"&lt;/&gt; World:SpawnAt( id: number, ...: Component&lt;any&gt; ) → number Spawns an entity at the given position.  "},{"title":"Spawn​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Spawn","content":"&lt;/&gt; World:Spawn(...: Component&lt;any&gt;) → number Spawns an entity with the world's next id.  "},{"title":"Despawn​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Despawn","content":"&lt;/&gt; World:Despawn(id: number) → () Despawns a given entity destroying all of its components.  "},{"title":"Get​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Get","content":"&lt;/&gt; World:Get( id: number, ...: Assembler&lt;any&gt;?-- If set, the function will return a tuple of components in this order ) → ...any | Types.Dictionary&lt;any&gt; Returns some or all of the components data from the desired entity.  "},{"title":"Set​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Set","content":"&lt;/&gt; World:Set( id: number, ...: Component&lt;any&gt; ) → () Sets a new value for the given components.  "},{"title":"Update​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Update","content":"&lt;/&gt; World:Update( id: number, ...: Component&lt;{[any]: any}&gt; ) → () Updates existing table components with the new keys from the given components. If the table component does not already exist, this acts just as World:Set  "},{"title":"Remove​","type":1,"pageTitle":"World","url":"/Puzzle/api/World#Remove","content":"&lt;/&gt; World:Remove( id: number, ...: Assembler&lt;any&gt; ) → () Removes the given components from the entity. "}]